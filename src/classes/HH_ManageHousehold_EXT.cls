/*
    Written by Ryan Foster, copyright (c) 2011 Groundwire
    This program is released under the GNU Affero General Public License, Version 3. http://www.gnu.org/licenses/

    04/01/2012 James Melville
    Changes made throughout to support NPSP HH
    * String.escapeSingleQuotes() added (bug fix for names including ' etc.)
    * class renamed HH_ManageHousehold_EXT
    * Fields / objects updated to NPSP values / names e.g. npo02__Household__c (namespace prefix required?)
    * Naming methods updated to support NPSP's Name / Formal / Informal structure and npo02__SYSTEM_CUSTOM_NAMING__c setting field
    * Address object updated with viableAddress class to store household or contact addresses
    * use Mailing* instead of Other* fields for addresses
    * Set Household address based on address selected in UI
    * Use "useAddress" flag to set or not set address on contacts
    * 15/01/2012 Fixed household addressing, added tests for household addressing code
    * 16/01/2012 Fixed defect when contacts were removed and re-added
*/
/**
* @author Ryan Foster, James Melville
* @date 2012 (2.4)
* @group Households
* @description This class is the VF page extension for the Manage Household interface. This allows users to
* setup their household members, name, and greeting before creating the household. It will also allow the user
* to set the address on the household.  
*/
global with sharing class HH_ManageHousehold_EXT {
    
    /*******************************************************************************************************
    * @description use an SObject to handle both HH Accounts and HH Objects
    */
    public SObject hh { get; set; }
    
    /*******************************************************************************************************
    * @description to easily tell our Account override page whether to defer to the normal Account edit page
    * when the user is trying to change their recordtype!
    */
    public boolean isChangingRecordType {
        get {
        	if (ApexPages.currentPage() != null) {
                map<string, string> mapParams = ApexPages.currentPage().getParameters();
                if (mapParams != null) {
                    string paramRtId = mapParams.get('RecordType');
		            if (paramRtId != null && paramRtId != ACCT_IndividualAccounts_TDTM.rtIdForAccountModel(true)) {
		                return true;
		            }
                }
        	}
            return false; 
        }
    }
    
    /*******************************************************************************************************
    * @description forcode that knows it is a Household Account
    */
    public Account hhA {
    	get {
    		return (isHHAccount ? (Account) hh : null);
    	}
    }
    
    /*******************************************************************************************************
    * @description for code that knows it is a Household Object
    */
    public npo02__Household__c hhO {
    	get {
            return (!isHHAccount ? (npo02__Household__c) hh : null);
    	}
    }
    
    /*******************************************************************************************************
    * @description is it an HH Account vs a HH Object
    */
    public boolean isHHAccount { get; set; }
    
    /*******************************************************************************************************
    * @description the name of the controller class
    */
    public String ctrlName {
        get {
            return 'HH_ManageHousehold_EXT';
        }  
    }    

    /*******************************************************************************************************
    * @description is automatic household naming used for this household?
    */
    public Boolean autoName {
        get {            
            if (hhsettings.npo02__Advanced_Household_Naming__c){ 
                if (hh.Id == null && hh.get('Name') == null) {
                    return true;
                }
                
                if (hh.get('npo02__SYSTEM_CUSTOM_NAMING__c') != null) {
                    if(string.valueOf(hh.get('npo02__SYSTEM_CUSTOM_NAMING__c')).contains('Name'))
                        return false;
                }
                return true;
            }
            else
                return false;               
        }
    }

    /*******************************************************************************************************
    * @description is automatic formal greeting used for this household?
    */
    public Boolean autoFormalGreeting {
        get {
            if (hhsettings.npo02__Advanced_Household_Naming__c){
                if (hh.Id == null && hh.get('npo02__Formal_Greeting__c') == null) {
                    return true;
                }
                if (hh.get('npo02__SYSTEM_CUSTOM_NAMING__c') != null){
                    if(string.valueOf(hh.get('npo02__SYSTEM_CUSTOM_NAMING__c')).contains('Formal_Greeting__c'))
                        return false;
                }   
                return true; 
            }
            else
                return false;               
        }
    }
    
    /*******************************************************************************************************
    * @description is automatic informal greeting used for this household?
    */
    public Boolean autoInformalGreeting {
        get {
            if (hhsettings.npo02__Advanced_Household_Naming__c){                
                if (hh.Id == null && hh.get('npo02__Informal_Greeting__c') == null) {
                    return true;
                }
                if (hh.get('npo02__SYSTEM_CUSTOM_NAMING__c') != null)
                {
                    if(string.valueOf(hh.get('npo02__SYSTEM_CUSTOM_NAMING__c')).contains('Informal_Greeting__c'))
                        return false;
                }   
                return true; 
            }
            else
                return false;               
        }
    }
    
    /*******************************************************************************************************
    * @description if automatic household naming is used for this household, return the autogenerated name
    */
    public String hhName {
        get {
            if (autoName) {
                return getHHName();
            }
            return string.valueOf(hh.get('Name'));
        }
        set;
    }


    /*******************************************************************************************************
    * @description if automatic household greeting is used for this household, return the autogenerated greeting
    */
    public String hhFormalGreeting {
        get {
            if (autoFormalGreeting) {
                return getHHFormalName();
            }
            return string.valueOf(hh.get('npo02__Formal_Greeting__c'));
        }
        set;
    }


    /*******************************************************************************************************
    * @description if automatic household informal greeting is used for this household, return the autogenerated greeting
    */
    public String hhInformalGreeting {
        get {
            if (autoInformalGreeting) {
                return getHHInformalName();
            }
            return string.valueOf(hh.get('npo02__Informal_Greeting__c'));
        }
        set;
    }    
    
    public Id conId;
    public Contact con;
    
    /** @description the list of Contacts in the household */
    public map<Id, Contact> activeContacts;
    /** @description the list of Contacts to remove from the household */
    public map<Id, Contact> removeContacts;
    /** @description the list of Contacts to add to the household */
    public list<Contact> insertContacts;
    
    public String jsonState {get;set;}
    public String originalState {get;set;}
    public String redirectTo {get;set;}
    
    /** @description update contact addresses to match household address */ 
    public boolean useAddress;
    public string activeAddressKey;
    public string activeStreet;
    public string activeCity;
    public string activePostalCode;
    public string activeState;
    public string activeCountry;
    
    /*******************************************************************************************************
    * @description returns the soql string to use to query contacts and their appropriate fields
    */
    private static string conSelect {
        get {
            if (conSelect == null) {
                //we use dynamic soql so we can include all contact fields, since custom naming may refer to any field.
                string strSoql = 'SELECT Id, npo02__Household_Naming_Order__c, FirstName, LastName, Salutation, Name, ' +
                    'npo02__Naming_Exclusions__c, npo02__Household__c, AccountId, HHId__c, ' + 
                    'is_Address_Override__c, Current_Address__c, ' + 
                    'MailingStreet, MailingCity, MailingState, MailingPostalCode, MailingCountry, CreatedDate ';
                
                set<string> setStrField = HH_HouseholdNaming.iNaming.setHouseholdNameFieldsOnContact();
                for (string strF : setStrField) {
                	if (!strSoql.contains(' ' + strF))
                        strSoql += ', ' + strF;
                }  
                                
                strSoql += ' FROM Contact ';
                conSelect = strSoql;
            }
            return conSelect;
        }
        set;        
    }    
    
    
    /*******************************************************************************************************
    * @description object to hold viable addresses - this is the DISTINCT (SQL style) list which includes 
    * household address and all contact addresses. see function getViableAddresses for how the map is populated
    */
    public map<String, viableAddress> viableAddresses;
    
    /*******************************************************************************************************
    * @description the Household Settings object
    */
    public static npo02__Households_Settings__c hhsettings{
        get{
            if(hhsettings == null){
                hhsettings = UTIL_CustomSettingsFacade.getHouseholdsSettings();
            }   
            return hhsettings;
        }
    } 
    
    
    /*******************************************************************************************************
    * @description holds an address's parts and key
    */
    public class viableAddress {
        String AddressKey;
        String MailingStreet;
        String MailingCity;
        String MailingPostalCode;
        String MailingState;
        String MailingCountry;
    }
    
    /*******************************************************************************************************
    * @description the controller's constructor
    */
    public HH_ManageHousehold_EXT(ApexPages.StandardController controller) {
        
    //resolve UI defects in IE10
    Apexpages.currentPage().getHeaders().put('X-UA-Compatible', 'IE=10');
        activeContacts = new map<Id, Contact>();
        removeContacts = new map<Id, Contact>();
        viableAddresses = new map<String, viableAddress>();
        insertContacts = new list<Contact>();
        
        Id tempHHid;
        SObject thh = (SObject)controller.getRecord();
        if (thh.Id == null) {
            try {
                String paramHhId = String.escapeSingleQuotes(ApexPages.currentPage().getParameters().get('hhid'));
                tempHHid = paramHhId; 
            } catch (Exception e) {
                tempHHid = null;
            }
        } else {
            tempHHid = thh.Id;
        }
        hh = tempHHid != null ? getHH(tempHHid) : thh;
        
        // remember whether we are dealing with HH Accounts or HH Objects
        isHHAccount = hh.getSObjectType() == Account.sObjectType;
        useAddress = isHHAccount;
        
        //Get the contact id from the query if present - ensure it is sanitised
        try {
            conId = (Id)String.escapeSingleQuotes(ApexPages.currentPage().getParameters().get('cid'));
        } catch (Exception e) {
            conId = null;
        }
        
        //if we are an existing household, get the members
        if (hh.Id != null || conId != null) {
            activeContacts.putAll(getHHMembers()); 
            //lookup viable addresses
            getViableAddresses();
        }
           
        // handle recordtype change that comes into the URL (from recordtype selection page)
        if (ApexPages.currentPage() != null) {
            map<string, string> mapParams = ApexPages.currentPage().getParameters();
            if (mapParams != null) {
                string paramRtId = mapParams.get('RecordType');
                if (paramRtId != null) {
                    hhA.recordTypeId = paramRtId;
                }
            }            
        }
                     
        jsonState = JSON.serialize(this);
        
        // If we are in edit mode, add a copy of the state to compare against
        originalState = (hh.Id != null) ? jsonState : '';
    }
    
    
    /*******************************************************************************************************
    * @description Remote Action to returns up to 20 contacts with names similar to a passed in string. Filters out
    * contacts that have already been added to the household.
    * @param subString the substring to filter by
    * @return list<Contact>
    ********************************************************************************************************/
    @RemoteAction
    global static list<Contact> findContacts(string subString, String state) {
        HH_ManageHousehold_EXT ManageHousehold = unpackState(state);
        
        string excludeIds = '';
        list<Id> activeConIds = new list<Id>();
        activeConIds.addAll(ManageHousehold.activeContacts.keySet());
        if (!activeConIds.isEmpty()) {
            excludeIds = 'AND Id NOT IN (';
            integer i = 1;
            for (Id conId : activeConIds) {
                excludeIds += '\''+conId+'\'';
                if (i != activeConIds.size()) excludeIds += ',';
                i += 1;
            }
            excludeIds += ')';
        }
        //added String.escapeSingleQuotes for names like O'Leary and prevent sql injection by users
        String whereClause = 'WHERE Name LIKE \'%'+String.escapeSingleQuotes(subString)+'%\' '+excludeIds+' LIMIT 20';
        String q = conSelect + whereClause;
        return database.query(q);
    }
    
    /*******************************************************************************************************
    * @description Takes a JSON string and attempts to instantiate HH_ManageHousehold_EXT using the
    * deserialized object.
    * @param state A serialized copy of the page controller state.
    * @return HH_ManageHousehold_EXT
    ********************************************************************************************************/
    public static HH_ManageHousehold_EXT unpackState(String state) {
        // There is a "bug" where not all of the classes have been loaded by apex when it attempts
        // to JSON.deserialize. The method below makes sure that the type is properly loaded when it attempts to
        // instantiate the object.
        String strState = state;
        JSONParser parser = JSON.createParser(state);
        Type wrapperType = Type.forName('HH_ManageHousehold_EXT');
        HH_ManageHousehold_EXT ManageHousehold = (HH_ManageHousehold_EXT) parser.readValueAs(wrapperType);
        
        return ManageHousehold;
    }
    /*******************************************************************************************************
    * @description Accepts a HH_ManageHousehold_EXT and serializes it into JSON
    * @param state A copy of the page controller state.
    * @return String JSON state
    ********************************************************************************************************/
    public static string packState(HH_ManageHousehold_EXT state) {
        return JSON.serialize(state);
    }
    
    /*******************************************************************************************************
    * @description Remote Action to add a Contact to HH by Id, optionally include Contact's HH.
    * @return string JSON state
    ********************************************************************************************************/
    @RemoteAction
    global static string remoteAddMember(Id cid, Boolean includeHH, String state) {
        HH_ManageHousehold_EXT ManageHousehold = unpackState(state);
        Boolean status = false;
        
        if (!includeHH) {
            // If we should not include household members
            status = ManageHousehold.addContact(cid);
        } else {
            // If we should include household members
            status = ManageHousehold.addContactWithHousehold(cid);
        }
        
        // Update viable addresses
        ManageHousehold.getViableAddresses();
  
        return packState(ManageHousehold);
    }
    
    /*******************************************************************************************************
    * @description Remote Action to remove a contact by Id
    * @return string JSON state
    ********************************************************************************************************/
    @RemoteAction
    global static string remoteRemoveMember(Id cid, String state) {
        HH_ManageHousehold_EXT ManageHousehold = unpackState(state);
        
        ManageHousehold.removeContact(cid);
        
        return packState(ManageHousehold);
    }
    
    /*******************************************************************************************************
    * @description Remote Action to set the naming related fields on the Household and gets the name.
    * @return string JSON state
    ********************************************************************************************************/
    @RemoteAction
    global static string remoteSetNaming(Boolean aN, String nN, Boolean aFG, String nFG, Boolean aIG, String nIG, String state) {
        HH_ManageHousehold_EXT ManageHousehold = unpackState(state);
        UTIL_Debug.debug('**** remoteSetName()');
        
        ManageHousehold.hh.put('npo02__SYSTEM_CUSTOM_NAMING__c', '');
        //for each of the naming exceptions, set the override field and the overridden value
        if (!aN) { 
            ManageHousehold.hh.put('Name', nN);
            ManageHousehold.hh.put('npo02__SYSTEM_CUSTOM_NAMING__c',  string.valueOf(ManageHousehold.hh.get('npo02__SYSTEM_CUSTOM_NAMING__c')) + 'Name;');
        }
        
        if (!aFG) {
            ManageHousehold.hh.put('npo02__Formal_Greeting__c', nFG);
            ManageHousehold.hh.put('npo02__SYSTEM_CUSTOM_NAMING__c',  string.valueOf(ManageHousehold.hh.get('npo02__SYSTEM_CUSTOM_NAMING__c')) + 'Formal_Greeting__c;');
        }
        
        if (!aIG) {
            ManageHousehold.hh.put('npo02__Informal_Greeting__c', nIG);
            ManageHousehold.hh.put('npo02__SYSTEM_CUSTOM_NAMING__c',  string.valueOf(ManageHousehold.hh.get('npo02__SYSTEM_CUSTOM_NAMING__c')) + 'Informal_Greeting__c;');
        }
        
        return packState(ManageHousehold);
    }
    
    /*******************************************************************************************************
    * @description Remote Action to save HH.
    * @return string JSON state
    ********************************************************************************************************/
    @RemoteAction
    global static string remoteSave(String state) {
        HH_ManageHousehold_EXT ManageHousehold = unpackState(state);      
        UTIL_Debug.debug('**** remoteSave()');
        ManageHousehold.saveHH();
        return packState(ManageHousehold);
    }
    
    
    /*******************************************************************************************************
    * get the household record by Id with all of the fields.
    * @return SObject.
    ********************************************************************************************************/
    public SObject getHH(string hhId) {
    	 if (hhId.startsWith('001'))
    	    return (SObject)getHHA(hhId);
         else
            return (Sobject)getHHO(hhId);
    }


    /*******************************************************************************************************
    * @Describes npo02__Household__c to get all of the fields, then runs a SOQL to get the household record by
    * Id with all of the fields.
    * @return npo02__Household__c.
    ********************************************************************************************************/
    public npo02__Household__c getHHO(Id hhId) {
        Map<String, Schema.SObjectField> fieldMap = Schema.SObjectType.npo02__Household__c.fields.getMap();
        list<String> fields = new list<String>();
        fields.addAll(fieldMap.keySet());
        String hhq = 'SELECT ';
        Integer i = 1;
        for (String fld : fields) {
            hhq += fld;
            if (i != fields.size()) hhq += ', ';
            i += 1;
        }
        hhq += ' FROM npo02__Household__c WHERE Id = \''+hhId+'\'';
        String q = hhq;
        npo02__Household__c houseHold = database.query(q);
        return houseHold;
    }
    
    /*******************************************************************************************************
    * @Describes Account to get all of the fields, then runs a SOQL to get the household record by
    * Id with all of the fields.
    * @return Account.
    ********************************************************************************************************/
    public Account getHHA(Id hhId) {
        Map<String, Schema.SObjectField> fieldMap = Schema.SObjectType.Account.fields.getMap().clone();
        // Remove compount address fields available in API 30 and up
        fieldMap.remove('billingaddress');
        fieldMap.remove('shippingaddress');

        list<String> fields = new list<String>();
        for (string strField : fieldMap.keySet()) {
            // don't include Person Account fields
            if (!strField.endsWith('__pc'))
                fields.add(strField);
        }

        String hhq = 'SELECT ';
        Integer i = 1;
        for (String fld : fields) {
            hhq += fld;
            if (i != fields.size()) hhq += ', ';
            i += 1;
        }
        hhq += ' FROM Account WHERE Id = \''+hhId+'\'';
        String q = hhq;
        Account houseHold = database.query(q);
        UTIL_Debug.debug('**** getHHA() requeried household: ' + household);
        return houseHold;
    }

    /*******************************************************************************************************
    * @description add a contact to the household by id.
    * @param Id cid the id to add.
    * @return Boolean
    ********************************************************************************************************/
    public boolean addContact(Id cid) {
        
        String whereClause = 'WHERE Id = \''+cid+'\'';
        String q = conSelect + whereClause;
        list<Contact> con = Database.query(q);
        if (!con.isEmpty()) {
            activeContacts.put(con[0].id, con[0]);
            removeContacts.remove(con[0].id);
            return true;
        }
        return false;
        
    }
    
    /*******************************************************************************************************
    * @Remove a contact by Id from the active set. Also resets the viableAddresses and activeAddress
    * @return boolean.
    ********************************************************************************************************/
    public boolean removeContact(Id cid) {
        
        Contact con = activeContacts.containsKey(cid) ? activeContacts.get(cid) : null;
        
        if (con == null) return false;
        
        // If this is an existing HH and the contact was a member, add the contact to list of removes
        // don't use con.HHId__c in case they were added in this session, and not yet saved, the formula field would not be populated
        if (hh.Id != null && ((isHHAccount && con.AccountId == hh.Id) || (!isHHAccount && con.npo02__Household__c == hh.Id))) {
        	if (isHHAccount) {
        	    con.AccountId = null;
        	    // if they are removing the primary contact, clear primary contact from the hh account.
        	    if (hhA.npe01__One2OneContact__c == cid) {
        	       hhA.npe01__One2OneContact__c = null;
        	    }
        	} else {
                con.npo02__Household__c = null;
        	}
            removeContacts.put(con.id,con);
        }
        
        // remove the contact from the active set
        activeContacts.remove(cid);
        
        if (cid == conId) conid = null;
        
        getViableAddresses();
        
        if(viableAddresses.isEmpty() || viableAddresses.get(activeAddressKey) == null)
        {
            activeAddressKey = null;
            if (!viableAddresses.isEmpty()) setActiveAddress(new list<String>(viableAddresses.keySet())[0]);
        }
        
        return true;
        
    }
    
    /*******************************************************************************************************
    * @description add a contact to the household by id along with all of the contacts in the same
    * household.
    * @param Id cid the id to add.
    * @return Boolean
    ********************************************************************************************************/
    public boolean addContactWithHousehold(Id cid) {
        
        String whereClause = 'WHERE Id = \''+cid+'\'';
        String q = conSelect + whereClause;
        list<Contact> con = Database.query(q);
        if (!con.isEmpty()) {
            activeContacts.put(con[0].id, con[0]);
            removeContacts.remove(con[0].id);
            // check for household then find and add contacts
            if (con[0].HHId__c != null) {
                whereClause = 'WHERE ' + UTIL_Namespace.StrTokenNSPrefix('HHId__c') + ' = \''+con[0].HHId__c+'\'';
                q = conSelect + whereClause;
                list<Contact> hhcons = Database.query(q);
                if (!hhcons.isEmpty()) {
                    for (Contact hhcon : hhcons) {
                        
                        activeContacts.put(hhcon.id, hhcon);
                        removeContacts.remove(hhcon.id);
                    }
                }
            }
            
            return true;
        }
        return false;
        
    }
    
    /*******************************************************************************************************
    * @description set the active address from the address fields on a contact.
    * @param Id cid the id of the contact to select the address from.
    * @return Boolean
    ********************************************************************************************************/
    public boolean setActiveAddress(String addressKey) {
        viableAddress selectedaddr = viableAddresses.get(addressKey);
        if (selectedaddr == null) return false;
        activeAddressKey = addressKey;
        activeStreet = selectedaddr.MailingStreet;
        activeCity = selectedaddr.MailingCity;
        activeState = selectedaddr.MailingState;
        activePostalCode = selectedaddr.MailingPostalCode;
        activeCountry = selectedaddr.MailingCountry;
        
        return true;
    }
    
    /*******************************************************************************************************
    * @description iterate over the active contacts and find all good addresses
    * @return list<viableAddress> list of viable addresses - with fields named similarly to the contact object
    ********************************************************************************************************/
    public list<viableAddress> getViableAddresses() {
        //list<Contact> retCons = new list<contact>();
        //if (activeContacts.isEmpty()) return retCons;
        viableAddresses.clear();
        
        string strStreet = null;
        string strCity = null;
        string strState = null;
        string strPostalCode = null;
        string strCountry = null;
        
        if (isHHAccount) {
        	strStreet = hhA.BillingStreet;
        	strCity = hhA.BillingCity;
        	strState = hhA.BillingState;
        	strPostalCode = hhA.BillingPostalCode;
        	strCountry = hhA.BillingCountry;
        } else {
        	strStreet = hhO.npo02__MailingStreet__c;
            strCity = hhO.npo02__MailingCity__c;
            strState = hhO.npo02__MailingState__c;
            strPostalCode = hhO.npo02__MailingPostalCode__c;
            strCountry = hhO.npo02__MailingCountry__c;
        }
        
        if (strStreet != null || strCity != null || strState != null || strPostalCode != null || strCountry != null)
        {
            string addressString = strStreet + '#' + strCity + '#' + strState  + '#' + strPostalCode + '#' + strCountry;

            // regex pattern for getting all white space
            pattern whtspc = pattern.compile('[\\s]');
            
            //find whitespace
            matcher matchWhtSpc = whtspc.matcher(addressString);
            
            //replace whitespace
            addressString = matchWhtSpc.replaceAll('');
            
            if (!viableAddresses.containsKey(addressString))
            {
                viableAddress hhaddr = new viableAddress();
                hhaddr.AddressKey = addressString;
                hhaddr.MailingStreet = strStreet;
                hhaddr.MailingCity = strCity;
                hhaddr.MailingState = strState;
                hhaddr.MailingPostalCode = strPostalCode;
                hhaddr.MailingCountry = strCountry;                	
                viableAddresses.put(addressString, hhaddr);
            }
            
            if(activeAddressKey == null)
                setActiveAddress(addressString);
        }
                
        list<Id> activeConIds = new list<Id>();
        activeConIds.addAll(activeContacts.keySet());
        String q = conSelect + 'WHERE id IN :activeConIds';
        list<Contact> cons = Database.query(q);
        
        
        for (Contact con : cons) {
            if (con.MailingStreet != null || con.MailingCity != null || con.MailingState != null || con.MailingPostalCode != null || con.MailingCountry != null) {
                
                string addressString = con.MailingStreet + '#' + con.MailingCity + '#' + con.MailingState + '#' + con.MailingPostalCode + '#' + con.MailingCountry;
                
                // regex pattern for getting all white space
                pattern whtspc = pattern.compile('[\\s]');
                
                //find whitespace
                matcher matchWhtSpc = whtspc.matcher(addressString);
                
                //replace whitespace
                addressString = matchWhtSpc.replaceAll('');
                
                if (!viableAddresses.containsKey(addressString))
                {
                    viableAddress conaddr = new viableAddress();
                    conaddr.AddressKey = addressString;
                    conaddr.MailingStreet = con.MailingStreet;
                    conaddr.MailingCity = con.MailingCity;
                    conaddr.MailingState = con.MailingState;
                    conaddr.MailingPostalCode = con.MailingPostalCode;
                    conaddr.MailingCountry = con.MailingCountry;
                    viableAddresses.put(addressString, conaddr);
                    
                    if(activeAddressKey == null)
                        setActiveAddress(addressString);
                }
            }
        }

        // for HH Accounts, also include all Address objects
        if (isHHAccount && hh.Id != null) {
	        q = 'select MailingStreet__c, MailingStreet2__c, MailingCity__c, MailingState__c, MailingPostalCode__c, MailingCountry__c from Address__c ' +
	           ' where Household_Account__c = \'' + hh.Id + '\''; 
	        q = UTIL_Namespace.StrAllNSPrefix(q);
	        list<Address__c> listAddr = Database.query(q);	        
	        
	        for (Address__c addr : listAddr) {
	            if (addr.MailingStreet__c != null || addr.MailingStreet2__c != null || addr.MailingCity__c != null || addr.MailingState__c != null || addr.MailingPostalCode__c != null || addr.MailingCountry__c != null) {
	                
	                string addressString = ADDR_Addresses_TDTM.getMultilineStreet(addr) + '#' + addr.MailingCity__c + '#' + addr.MailingState__c + '#' + addr.MailingPostalCode__c + '#' + addr.MailingCountry__c;
	                
	                // regex pattern for getting all white space
	                pattern whtspc = pattern.compile('[\\s]');
	                
	                //find whitespace
	                matcher matchWhtSpc = whtspc.matcher(addressString);
	                
	                //replace whitespace
	                addressString = matchWhtSpc.replaceAll('');
	                
	                if (!viableAddresses.containsKey(addressString))
	                {
	                    viableAddress va = new viableAddress();
	                    va.AddressKey = addressString;
	                    va.MailingStreet = ADDR_Addresses_TDTM.getMultilineStreet(addr);
	                    va.MailingCity = addr.MailingCity__c;
	                    va.MailingState = addr.MailingState__c;
	                    va.MailingPostalCode = addr.MailingPostalCode__c;
	                    va.MailingCountry = addr.MailingCountry__c;
	                    viableAddresses.put(addressString, va);
	                    
	                    if(activeAddressKey == null)
	                        setActiveAddress(addressString);
	                }
	            }
	        }
        }


        return viableAddresses.values();
    }
    
    /*******************************************************************************************************
    * @description Returns a formulated string based on the contacts in the household
    * @return String The name of the household based on the contacts used.
    ********************************************************************************************************/
    public string getHHName() {
        HH_HouseholdNaming hh = new HH_HouseholdNaming();
        String name;
        if (!activeContacts.isEmpty()||!insertContacts.isEmpty()) {
            name = hh.getHHName(sortingList());
        }
        return name;
    }
    
    /*******************************************************************************************************
    * @description Returns a formulated string based on the contacts in the household (there is a method
    * because eventually it will be a javascript remoting method)
    * @return String The name of the household based on the contacts used.
    ********************************************************************************************************/
    public string getHHFormalName() {
        HH_HouseholdNaming hh = new HH_HouseholdNaming();
        String name;
        if (!activeContacts.isEmpty()||!insertContacts.isEmpty()) {
            name = hh.getFormalName(sortingList());
        }
        return name;
    }
    
    /*******************************************************************************************************
    * @description Returns a formulated string based on the contacts in the household (there is a method
    * because eventually it will be a javascript remoting method)
    * @return String The name of the household based on the contacts used.
    ********************************************************************************************************/
    public string getHHInformalName() {
        HH_HouseholdNaming hh = new HH_HouseholdNaming();
        String name;
        if (!activeContacts.isEmpty()||!insertContacts.isEmpty()) {
            name = hh.getInformalName(sortingList());
        }
        return name;
    }
    
    /*******************************************************************************************************
    * @description Sorts the active contacts and contacts to insert by their order in the UI
    * for passing to the Household Naming logic
    * @return list<Contact> A sorted list of contacts.
    ********************************************************************************************************/
    public list<Contact> sortingList() {
        list<Contact> cons = new list<contact>();
        list<double> sortOrder = new list<double>();
        map<double,Contact> consToSort = new map<double,Contact>();
        
        // to handle contacts without naming order, sort them by creation date.
        double iorderNull = double.valueOf(System.Now().format('yyyyMMddHHmmss'));
        double iorder;
        
        if (!activeContacts.isEmpty()) {
            for(Contact con : activeContacts.values()) {
            	if (con.npo02__Household_Naming_Order__c != null )
                    iorder = double.valueOf(con.npo02__Household_Naming_Order__c);
                else
                    iorder = double.valueOf(con.CreatedDate.format('yyyyMMddHHmmss'));
                consToSort.put(iorder, con);
            }
        }
        
        if (!insertContacts.isEmpty()) {
            for(Contact con : insertContacts) {
                iorder = (con.npo02__Household_Naming_Order__c != null ? Integer.valueOf(con.npo02__Household_Naming_Order__c) : iorderNull++);
                consToSort.put(iorder ,con);
            }
        }
        if(!consToSort.isEmpty()) {
            sortOrder.addAll(consToSort.keySet());
            sortOrder.sort();
            for (double nb : sortOrder) {
                cons.add(consToSort.get(nb));
            }
        }
        return cons;
    }
    
    
    /*******************************************************************************************************
    * @description Retrieves household members. If this is a new hh, retrieves fields for the passed in
    * contact id.
    * @return list<Contact> A sorted list of contacts.
    ********************************************************************************************************/
    public list<Contact> getHHMembers() {
        String q = conSelect;
        string strHHId = UTIL_Namespace.StrTokenNSPrefix('hhId__c');
        
        if (conId != null || hh.id != null) q += ' WHERE';
        if (conId != null) q += ' Id=\''+conId+'\'';
        if (conId != null && hh.id != null) q += ' or';
        if (hh.id != null) q += ' ' + strHHId + ' = \''+hh.id+'\'';
        q += ' ORDER BY ' + strHHId + ', npo02__Household_Naming_Order__c ASC NULLS LAST, CreatedDate LIMIT 500';
        String qry = q;
        return Database.query(qry);
    }
    
    /*******************************************************************************************************
    * @description Called by the remoteSave RemoteAction. This does most of the work to save the
    * state of the custom interface.
    * @return void.
    ********************************************************************************************************/
    public void saveHH() {      
        
        //save the household address if this is a new household, in an existing household this is handled by the vanilla save action
        if (hh.id == null && !isHHAccount) { 
            hhO.npo02__MailingStreet__c = activeStreet;
            hhO.npo02__MailingCity__c = activeCity;
            hhO.npo02__MailingState__c = activeState;
            hhO.npo02__MailingPostalCode__c = activePostalCode;
            hhO.npo02__MailingCountry__c = activeCountry;
        } else if (hh.id == null && isHHAccount) {        	 
            hhA.BillingStreet = activeStreet;
            hhA.BillingCity = activeCity;
            hhA.BillingState = activeState;
            hhA.BillingPostalCode = activePostalCode;
            hhA.BillingCountry = activeCountry;
        }
        // Insert Household
        UTIL_Debug.debug('**** saveHH() about to upsert hh: ' + hhA);
        upsert hh;
        
        // Insert new contacts.
        // This MUST happen before updating contacts
        if (!insertContacts.isEmpty()) {
            for (Contact con : insertContacts) {
            	if (isHHAccount) {
            		con.AccountId = hh.Id;
            	} else {
                    con.npo02__Household__c = hh.id;
            	}
                
                // Set Addresses on new Contacts
                if (useAddress == true) {
                    con.MailingStreet = activeStreet;
                    con.MailingCity = activeCity;
                    con.MailingState = activeState;
                    con.MailingPostalCode = activePostalCode;
                    con.MailingCountry = activeCountry;
                    con.Current_Address__c = null;
                }
            }
            insert insertContacts;
        }
        
        // Update our included contacts
        if (!activeContacts.isEmpty()) {
            
            for (Contact con : activeContacts.values()) {
                
                // Set Addresses on active Contacts
                if (useAddress == true && con.is_Address_Override__c == false) {
                    con.MailingStreet = activeStreet;
                    con.MailingCity = activeCity;
                    con.MailingState = activeState;
                    con.MailingPostalCode = activePostalCode;
                    con.MailingCountry = activeCountry;
                    con.Current_Address__c = null;
                }
                
                // Set household on contacts
                if (isHHAccount) {
                    con.AccountId = hh.Id;
                } else {
                    con.npo02__Household__c = hh.id;
                }
                
                update con;
            }
        }
        
        // Remove contacts from household
        if (!removeContacts.isEmpty()) {
            list<Contact> contactsToRemove = new list<Contact>();
            for (Contact con : removeContacts.values()) {
            	if (isHHAccount) {
            	    con.AccountId = null;
            	} else {
                    con.npo02__Household__c = null;
            	}
                contactsToRemove.add(con);
            }
            update contactsToRemove;
        }
        
        
    }
    
    /*******************************************************************************************************
    * @description Calls delete, on the correct hh, using the standard controller
    * @return PageReference.
    ********************************************************************************************************/
    public PageReference deleteHH() {
        ApexPages.StandardController sc = new ApexPages.standardController(hh);
        return sc.delete();
    }
    
    /*******************************************************************************************************
    * @description Calls save, on the correct hh.  NOTE: THis is called AFTER the javascript remote call to
    * remoteSave(), which calls saveHH().
    * @return PageReference.
    ********************************************************************************************************/
    public PageReference save() {
        // since remoteSave() was first called, we've already saved the data that the javascript ui handles.
        // now we only need to save the fields in the fieldset section with an update, and we don't want
        // any of the normal account trigger work to run again.
        HH_ProcessControl.inFutureContext = true;
        
        // don't call StandardController, or it will overwrite any changes we did asynchronously (like updating rollups)
        //ApexPages.StandardController sc = new ApexPages.standardController(hh);
        //PageReference sv = sc.save();
        
        UTIL_Debug.debug('**** save() has hhA: ' + hhA);
        
        // only update the hh fields that are in the field set.
        if (isHHAccount) {
        	Account acc = new Account(Id = hh.Id);
	        for (Schema.FieldSetMember f : Schema.SObjectType.Account.fieldSets.Manage_Household_Custom.getFields()) { 
	        	try {
	               acc.put(f.getFieldPath(), hh.get(f.getFieldPath()));
	        	} catch (Exception e) { 
	        	  //no need to save the error here. if the field is not updateable we will just ignore it
	        	}
	        } 
	        // add additional fields the page always uses
	        acc.Name = hhA.Name;
	        acc.npo02__SYSTEM_CUSTOM_NAMING__c = hhA.npo02__SYSTEM_CUSTOM_NAMING__c;
	        acc.npo02__Formal_Greeting__c = hhA.npo02__Formal_Greeting__c;
	        acc.npo02__Informal_Greeting__c = hhA.npo02__Informal_Greeting__c;
            acc.BillingStreet = hhA.BillingStreet;
	        acc.BillingCity = hhA.BillingCity;
            acc.BillingState = hhA.BillingState;
	        acc.BillingPostalCode = hhA.BillingPostalCode;
            acc.BillingCountry = hhA.BillingCountry;
            UTIL_Debug.debug('**** save() about to upsert acc: ' + acc);
            upsert acc;
        } else {
            npo02__Household__c h = new npo02__Household__c(Id = hh.Id);
            for (Schema.FieldSetMember f : Schema.SObjectType.npo02__Household__c.fieldSets.npo02__Manage_Household_Custom.getFields()) {
            	try {
                    h.put(f.getFieldPath(), hh.get(f.getFieldPath()));
            	} catch (Exception e) { 
            		//no need to save the error here. if the field is not updateable we will just ignore it
            	}
            }
            // add additional fields the page always uses
            h.Name = hhO.Name;
            h.npo02__SYSTEM_CUSTOM_NAMING__c = hhO.npo02__SYSTEM_CUSTOM_NAMING__c;
            h.npo02__Formal_Greeting__c = hhO.npo02__Formal_Greeting__c;
            h.npo02__Informal_Greeting__c = hhO.npo02__Informal_Greeting__c;
            h.npo02__MailingStreet__c = hhO.npo02__MailingStreet__c;
            h.npo02__MailingCity__c = hhO.npo02__MailingCity__c;
            h.npo02__MailingState__c = hhO.npo02__MailingState__c;
            h.npo02__MailingPostalCode__c = hhO.npo02__MailingPostalCode__c;
            h.npo02__MailingCountry__c = hhO.npo02__MailingCountry__c;
            upsert h;
        }
            
        return (new PageReference('/' + hh.Id));        
    }

}