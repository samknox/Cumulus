<apex:page controller="STG_PanelERR_CTRL">

    <script>
        /* 
         * We are using JavaScript instead of the Rerender atrribute of Visualforce components because of the 
         * impossibility to rerender elements based on a specific dropdown (apex:selectList) value.
         */
        var errNotif = {}
        var errHandling = {}
        jerr$ = jQuery.noConflict();

        errNotif.hideNotifDisplayName = function() { jerr$('[id$=errorNotifDisplayName]').hide(); }
        errNotif.showNotifDisplayName = function() { jerr$('[id$=errorNotifDisplayName]').show(); }

        errNotif.hideNotifDropDown = function() { jerr$('select[id$=notificationOption]').hide(); }
        errNotif.showNotifDropDown = function() { jerr$('select[id$=notificationOption]').show(); }
        
        errNotif.hideChatterGroupBox =  function() { jerr$('span[id$=chatterGroupBox]').hide(); }
        errNotif.showChatterGroupBox = function() { jerr$('span[id$=chatterGroupBox]').show(); }
        
        errHandling.disabled = function() { 
            jerr$('[id$=cbxENO]').prop('checked', false);
            jerr$('[id$=cbxSEO]').prop('checked', false);
        }
        
        errHandling.enabled = function() { 
            jerr$('[id$=cbxENO]').prop('checked', true);
            jerr$('[id$=cbxSEO]').prop('checked', true);
        }
        
        //initially hiding the auto-complete chatter group textarea
        jerr$(document).ready(function() {
            errNotif.hideNotifDropDown();   
            errNotif.hideChatterGroupBox();
        });
        
        //detecting click action on edit button
        /*jerr$(document).on('click', 'input[id$=editNotif]', function() {
            var errorNotifDisplay = jerr$('[id$=errorNotifDisplayName]').text();
            console.log('Text of errorNotifDisplayName box: ' + errorNotifDisplay);
            errNotif.hideNotifDisplayName();
            errNotif.showNotifDropDown();
            if(errorNotifDisplay.indexOf('Group:') >= 0) {
                jerr$('select[id$=notificationOption]').val('Chatter Group');
                errNotif.showChatterGroupBox();
            }
        });*/
        
        //detecting changes to the recipients drop-down
        jerr$(document).on('change', 'select[id$=notificationOption]', function() {         
            if(jerr$('select[id$=notificationOption]').find(':selected').text() == 'Chatter Group') {
                errNotif.showChatterGroupBox();
            } else {
                errNotif.hideChatterGroupBox();
            }
        });
        
        //detecting click action on save button
        jerr$(document).on('click', 'input[id$=saveNotif]', function() {
            var dropDownValue = jerr$('select[id$=notificationOption]').find(':selected').text();
            console.log('Dropdown value: ' + dropDownValue);
            var chatterGroupId = jerr$.trim(jerr$('input[id$=groupId]').val());
            console.log('Chatter group Id: ' + chatterGroupId);
            if(dropDownValue != 'Chatter Group' || (dropDownValue == 'Chatter Group' && chatterGroupId.length > 0)) { 
                errNotif.hideChatterGroupBox();
            }
            errNotif.showNotifDisplayName();
        });
        
        //detecting click action on cancel button
        jerr$(document).on('click', 'input[id$=cancelNotif]', function() { 
            //errNotif.hideNotifDropDown();
            errNotif.hideChatterGroupBox();
        });
        
        //detecting click on disabling error handling checkbox
        jerr$(document).on('click', 'input[id$=cbxDEH]', function() {
            if(jerr$(this).is(':checked')) {
                errHandling.disabled();
            } else {
                errHandling.enabled();
            }
        });
        
        //detecting click on storing errors checkbox
        jerr$(document).on('click', 'input[id$=cbxSEO]', function() {
            //if store errors is unchecked, we also have to uncheck error notifications
            if(!jerr$(this).is(':checked')) {
                jerr$('[id$=cbxENO]').prop('checked', false);
            }
        });
        
        //detecting click on error notifications checkbox
        jerr$(document).on('click', 'input[id$=cbxENO]', function() {
            //if error notifications checkbox is checked, we also have to check storing errors
            if(jerr$(this).is(':checked')) {
                jerr$('[id$=cbxSEO]').prop('checked', true);
            }
        });
   </script>
    
    <c:STG_PageHeader sectionLabel="{!$Label.stgNavSystem}" pageLabel="{!$Label.stgNavErrorNotify}" />
     
    <apex:form id="form" styleClass="form-horizontal">  
        <apex:pageMessages id="pageMessages"/>
        <apex:outputPanel id="saveError" style="padding-left:25%; font-weight:bold; color: red;">
            <apex:outputPanel rendered="{!NOT(ISNULL(saveErrorMessage))}">
                <apex:outputText value="{!saveErrorMessage}" />
            </apex:outputPanel>
        </apex:outputPanel>
        <apex:pageBlock mode="maindetail">
            <apex:outputPanel id="fields">
                <apex:outputPanel layout="block" rendered="{!isReadOnlyMode}" styleClass="button-block">
                    <apex:commandButton id="editNotif" value="{!$Label.stgBtnEdit}" status="statusLoad" action="{!editSettings}" 
                        rendered="{!isReadOnlyMode}" immediate="true" rerender="fields, commandButtons, saveError" styleClass="btn-sm btn-primary" />
                </apex:outputPanel>
                
                <div class="form-group">
                    <apex:outputLabel value="{!$ObjectType.Error_Settings__c.Fields.Store_Errors_On__c.Label}" for="cbxSEO" styleClass="col-sm-4 control-label" />
                   <div class="col-sm-8 form-control-column">
                        <apex:inputCheckbox value="{!stgService.stgErr.Store_Errors_On__c}" disabled="{!isReadOnlyMode}" id="cbxSEO" />
                   </div>
                   <div class="col-sm-offset-4 col-sm-8 help-block">
                        <apex:outputText value="{!$Label.stgHelpStoreErrorsOn}" />
                   </div>
               </div>
               
                <div class="form-group">
                    <apex:outputLabel value="{!$ObjectType.Error_Settings__c.Fields.Error_Notifications_On__c.Label}" for="cbxENO" styleClass="col-sm-4 control-label" />
                   <div class="col-sm-8 form-control-column">
                        <apex:inputCheckbox value="{!stgService.stgErr.Error_Notifications_On__c}" disabled="{!isReadOnlyMode}" id="cbxENO" />
                   </div>
                   <div class="col-sm-offset-4 col-sm-8 help-block">
                        <apex:outputText value="{!$Label.stgHelpErrorNotifyOn}" />
                   </div>
               </div>
               
               <div class="form-group">
	                <apex:outputLabel value="{!$ObjectType.Error_Settings__c.Fields.Disable_Error_Handling__c.Label}" for="cbxDEH" styleClass="col-sm-4 control-label" />
	                <div class="col-sm-8 form-control-column">
	                    <apex:inputCheckbox value="{!stgService.stgErr.Disable_Error_Handling__c}" disabled="{!isReadOnlyMode}" id="cbxDEH" />
	                </div>
	                <div class="col-sm-offset-4 col-sm-8 help-block">
	                    <apex:outputText value="{!$ObjectType.Error_Settings__c.Fields.Disable_Error_Handling__c.inlineHelpText}" />
	                </div>
	           </div>
               
               <div class="form-group">
                   <apex:outputLabel id="recipientLabel" value="{!$ObjectType.Error_Settings__c.Fields.Error_Notifications_To__c.Label}" for="notificationOption" styleClass="col-sm-4 control-label" />
                   <div class="col-sm-8 form-control-column">
                        <apex:outputPanel id="errRecipient">
                            <apex:outputText id="errorNotifDisplayName" value="{!strErrorNotifDisplayName}" rendered="{!isReadOnlyMode}" />
                            <apex:selectList id="notificationOption" value="{!notificationToDropDown}" size="1" multiselect="false" rendered="{!isEditMode}" styleClass="form-control">
                                <apex:selectOptions value="{!listSOERRNotifOptions}" />
                            </apex:selectList>
                        </apex:outputPanel>
                   </div>
                   <div class="col-sm-offset-4 col-sm-8 help-block">
                        <apex:outputText id="recipientHelp" value="{!$Label.stgHelpErrorNotifyTo}" />
                   </div>
               </div>
            </apex:outputPanel>
             
            <apex:outputPanel id="chatterGroupBox">
	            <div class="form-group">
                    <apex:outputLabel value="{!$Label.stgLabelSelectChatterGroup}" for="chatterGroupSearchBox" styleClass="col-sm-3 col-sm-offset-1 control-label" />
	                <div class="col-sm-8 form-control-column">
	                    <c:UTIL_Typeahead searchBoxId="chatterGroupSearchBox" object="CollaborationGroup" primaryField="Name" searchScope="NAME"
	                        placeholder="{!$Label.stgLabelTypeAhead}" minSearchLength="2" destinationForSelectedId="groupId" stealFocus="false" 
	                       styleClass="form-control" /> 
	                </div>
	                <div class="col-sm-offset-4 col-sm-8 help-block">
                        <apex:outputText value="{!$Label.stgHelpChatterGroup}" styleClass="help-block" />
	                </div>
	            </div>
                <apex:inputHidden id="groupId" value="{!groupId}" />
            </apex:outputPanel>  
   
            <div class="button-block">
                <apex:outputPanel id="commandButtons">
                    <apex:commandButton id="saveNotif" value="{!$Label.stgBtnSave}" status="statusLoad" action="{!saveSettings}" 
                        rendered="{!isEditMode}" immediate="false" rerender="fields, commandButtons, saveError" styleClass="btn-sm btn-primary" />
                    <apex:commandButton id="cancelNotif" value="{!$Label.stgBtnCancel}" status="statusLoad" action="{!cancelEdit}" 
                        rendered="{!isEditMode}" immediate="true" rerender="fields, commandButtons, saveError" styleClass="btn-sm btn-default" />
                </apex:outputPanel>
            </div>
     
        </apex:pageBlock>
    </apex:form>
     
</apex:page>